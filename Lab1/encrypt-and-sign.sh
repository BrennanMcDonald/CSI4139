KEY_DIR="Keys"
SIGN_KEY="$KEY_DIR/sign-priv.pem"
ENCRYPT_KEY="$KEY_DIR/encrypt"
PUB_SIGN_KEY="$KEY_DIR/sign-pub.pem"
PUB_ENCRYPT_KEY="$KEY_DIR/encrypt.pub"
FILE_NAME=$2
DATA_FILE=$3

encrypt_file() {
   echo "Encrypting file.."
   if [[ $# -lt 1 ]] ; then
      echo "Usage: encrypt_file <file> <key>"
      exit 1
   fi
   openssl rsautl -encrypt -pubin -inkey $2 -in $1 -out $1.enc
}

decrypt_file() {
   echo "Decrypting file.."
   if [[ $# -lt 1 ]] ; then
      echo "Usage: decrypt_file <file> <key>"
      exit 1
   fi
   openssl rsautl -decrypt -inkey $2 -in $1 -out plaintext.txt
}

clean() {
   echo "Cleaning up files..."
   rm *.enc *.dec decrypted* *sha256 &> /dev/null
}

generate() {
   # Add the './Keys' dir if it doesnt exist.
   if ! [ -d $KEY_DIR ]; then
      mkdir $KEY_DIR
   fi

   # Generate the signing key if it does not exist
   # we are using a 2048 bit RSA key generated by ssh-keygen
   if [ -f $SIGN_KEY ]; then
      echo "File $SIGN_KEY exists."
   else
      echo "File $SIGN_KEY does not exist."
      echo "Generating $SIGN_KEY Key"
      openssl genrsa -passout pass:"" -out $SIGN_KEY 4096
      openssl rsa -in $SIGN_KEY -pubout > $PUB_SIGN_KEY
   fi

   # Generate the Encryption key if it does not exist 
   # we are using a 2048 bit RSA key generated by ssh-keygen
   if [ -f $ENCRYPT_KEY ]; then
      echo "File $ENCRYPT_KEY exists."
   else
      echo "File $ENCRYPT_KEY does not exist."
      echo "Generating $ENCRYPT_KEY Key"
      openssl genrsa -passout pass:"" -out $ENCRYPT_KEY 2048
      openssl rsa -passout pass:"" -in $ENCRYPT_KEY -outform PEM -pubout -out $PUB_ENCRYPT_KEY
   fi
}

if [ $1 == 'clean' ]; then
   clean
   exit 0
fi

if [ $1 == 'generate' ]; then
   generate
   exit 0
fi

if [[ $# -lt 2 && $1 == 'verify' ]] ; then
  echo "Usage: encrypt-and-sign.sh verify <key-file> <data-file>"
  exit 1
fi

if [[ $# -lt 2 ]] ; then
  echo "Usage: encrypt-and-sign.sh <encrypt|decrypt|sign|verify|clean|generate> <data-file>"
  exit 1
fi

if [ $1 == 'encrypt' ]; then
   encrypt_file $FILE_NAME $PUB_ENCRYPT_KEY
   exit 0

fi
if [ $1 == 'decrypt' ]; then
   decrypt_file $FILE_NAME $ENCRYPT_KEY
   exit 0

fi

if [ $1 == 'sign' ]; then
   openssl dgst -sign $SIGN_KEY -out $FILE_NAME.sha256 $FILE_NAME
   exit 0
fi

if [ $1 == 'verify' ]; then
   openssl dgst -verify $PUB_SIGN_KEY -signature $FILE_NAME $DATA_FILE
   exit 0
fi

echo "Command not recognised."
