{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst errors_1 = require(\"./errors\");\n\nconst logger_1 = require(\"./logger\");\n\nconst logger = logger_1.getInstance();\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\n\nfunction createPathRewriter(rewriteConfig) {\n  let rulesCache;\n\n  if (!isValidRewriteConfig(rewriteConfig)) {\n    return;\n  }\n\n  if (_.isFunction(rewriteConfig)) {\n    const customRewriteFn = rewriteConfig;\n    return customRewriteFn;\n  } else {\n    rulesCache = parsePathRewriteRules(rewriteConfig);\n    return rewritePath;\n  }\n\n  function rewritePath(path) {\n    let result = path;\n\n    _.forEach(rulesCache, rule => {\n      if (rule.regex.test(path)) {\n        result = result.replace(rule.regex, rule.value);\n        logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n        return false;\n      }\n    });\n\n    return result;\n  }\n}\n\nexports.createPathRewriter = createPathRewriter;\n\nfunction isValidRewriteConfig(rewriteConfig) {\n  if (_.isFunction(rewriteConfig)) {\n    return true;\n  } else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n    return true;\n  } else if (_.isUndefined(rewriteConfig) || _.isNull(rewriteConfig) || _.isEqual(rewriteConfig, {})) {\n    return false;\n  } else {\n    throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);\n  }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n  const rules = [];\n\n  if (_.isPlainObject(rewriteConfig)) {\n    _.forIn(rewriteConfig, (value, key) => {\n      rules.push({\n        regex: new RegExp(key),\n        value: rewriteConfig[key]\n      });\n      logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n    });\n  }\n\n  return rules;\n}","map":null,"metadata":{},"sourceType":"script"}