{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst logger_1 = require(\"./logger\");\n\nconst logger = logger_1.getInstance();\n\nfunction init(proxy, option) {\n  const handlers = getHandlers(option);\n\n  for (const eventName of Object.keys(handlers)) {\n    proxy.on(eventName, handlers[eventName]);\n  }\n\n  logger.debug('[HPM] Subscribed to http-proxy events:', Object.keys(handlers));\n}\n\nexports.init = init;\n\nfunction getHandlers(options) {\n  // https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events\n  const proxyEvents = ['error', 'proxyReq', 'proxyReqWs', 'proxyRes', 'open', 'close'];\n  const handlers = {};\n\n  for (const event of proxyEvents) {\n    // all handlers for the http-proxy events are prefixed with 'on'.\n    // loop through options and try to find these handlers\n    // and add them to the handlers object for subscription in init().\n    const eventName = _.camelCase('on ' + event);\n\n    const fnHandler = _.get(options, eventName);\n\n    if (_.isFunction(fnHandler)) {\n      handlers[event] = fnHandler;\n    }\n  } // add default error handler in absence of error handler\n\n\n  if (!_.isFunction(handlers.error)) {\n    handlers.error = defaultErrorHandler;\n  } // add default close handler in absence of close handler\n\n\n  if (!_.isFunction(handlers.close)) {\n    handlers.close = logClose;\n  }\n\n  return handlers;\n}\n\nexports.getHandlers = getHandlers;\n\nfunction defaultErrorHandler(err, req, res) {\n  const host = req.headers && req.headers.host;\n  const code = err.code;\n\n  if (res.writeHead && !res.headersSent) {\n    if (/HPE_INVALID/.test(code)) {\n      res.writeHead(502);\n    } else {\n      switch (code) {\n        case 'ECONNRESET':\n        case 'ENOTFOUND':\n        case 'ECONNREFUSED':\n          res.writeHead(504);\n          break;\n\n        default:\n          res.writeHead(500);\n      }\n    }\n  }\n\n  res.end('Error occured while trying to proxy to: ' + host + req.url);\n}\n\nfunction logClose(req, socket, head) {\n  // view disconnected websocket connections\n  logger.info('[HPM] Client disconnected');\n}","map":null,"metadata":{},"sourceType":"script"}